{"remainingRequest":"/home/rahul/Desktop/svgcomplete/svg/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/rahul/Desktop/svgcomplete/svg/node_modules/@angular-redux/store/lib/src/utils/get-in.js","dependencies":[{"path":"/home/rahul/Desktop/svgcomplete/svg/node_modules/@angular-redux/store/lib/src/utils/get-in.js","mtime":1527648735000},{"path":"/home/rahul/Desktop/svgcomplete/svg/node_modules/cache-loader/dist/cjs.js","mtime":1529912799520},{"path":"/home/rahul/Desktop/svgcomplete/svg/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Gets a deeply-nested property value from an object, given a 'path'\n * of property names or array indices.\n *\n * @hidden\n */\nfunction getIn(v, pathElems) {\n    if (!v) {\n        return v;\n    }\n    // If this is an ImmutableJS structure, use existing getIn function\n    if ('function' === typeof v.getIn) {\n        return v.getIn(pathElems);\n    }\n    var firstElem = pathElems[0], restElems = pathElems.slice(1);\n    if (undefined === v[firstElem]) {\n        return undefined;\n    }\n    if (restElems.length === 0) {\n        return v[firstElem];\n    }\n    return getIn(v[firstElem], restElems);\n}\nexports.getIn = getIn;\n//# sourceMappingURL=get-in.js.map",null]}