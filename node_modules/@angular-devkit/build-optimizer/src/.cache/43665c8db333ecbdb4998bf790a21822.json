{"remainingRequest":"/home/rahul/Desktop/svgcomplete/svg/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/rahul/Desktop/svgcomplete/svg/node_modules/ng2-draggable/dist/draggable.directive.js","dependencies":[{"path":"/home/rahul/Desktop/svgcomplete/svg/node_modules/ng2-draggable/dist/draggable.directive.js","mtime":1490939965000},{"path":"/home/rahul/Desktop/svgcomplete/svg/node_modules/cache-loader/dist/cjs.js","mtime":1529912799520},{"path":"/home/rahul/Desktop/svgcomplete/svg/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nvar core_1 = require('@angular/core');\nvar DraggableDirective = /*@__PURE__*/ (function () {\n    function DraggableDirective(el, renderer) {\n        this.el = el;\n        this.renderer = renderer;\n        this.Δx = 0;\n        this.Δy = 0;\n        this.canDrag = true;\n        this.mustBePosition = ['absolute', 'fixed', 'relative'];\n    }\n    Object.defineProperty(DraggableDirective.prototype, \"draggable\", {\n        set: function (val) {\n            if (val === undefined || val === null || val === '')\n                return;\n            this.canDrag = !!val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DraggableDirective.prototype.ngOnInit = function () {\n        this.renderer.setElementAttribute(this.el.nativeElement, 'draggable', 'true');\n    };\n    DraggableDirective.prototype.ngAfterViewInit = function () {\n        try {\n            var position = window.getComputedStyle(this.el.nativeElement).position;\n            if (this.mustBePosition.indexOf(position) === -1) {\n                console.warn(this.el.nativeElement, 'Must be having position attribute set to ' + this.mustBePosition.join('|'));\n            }\n        }\n        catch (ex) {\n            console.error(ex);\n        }\n    };\n    DraggableDirective.prototype.ngOnDestroy = function () {\n        this.renderer.setElementAttribute(this.el.nativeElement, 'draggable', 'false');\n    };\n    DraggableDirective.prototype.onDragStart = function (event) {\n        this.Δx = event.x - this.el.nativeElement.offsetLeft;\n        this.Δy = event.y - this.el.nativeElement.offsetTop;\n    };\n    DraggableDirective.prototype.onDrag = function (event) {\n        this.doTranslation(event.x, event.y);\n    };\n    DraggableDirective.prototype.onDragEnd = function (event) {\n        this.Δx = 0;\n        this.Δy = 0;\n    };\n    DraggableDirective.prototype.doTranslation = function (x, y) {\n        if (!x || !y)\n            return;\n        this.renderer.setElementStyle(this.el.nativeElement, 'top', (y - this.Δy) + 'px');\n        this.renderer.setElementStyle(this.el.nativeElement, 'left', (x - this.Δx) + 'px');\n    };\n    DraggableDirective.decorators = [\n        { type: core_1.Directive, args: [{\n                    selector: '[draggable]',\n                    host: {\n                        '(dragstart)': 'onDragStart($event)',\n                        '(dragend)': 'onDragEnd($event)',\n                        '(drag)': 'onDrag($event)'\n                    }\n                },] },\n    ];\n    DraggableDirective.propDecorators = {\n        'draggable': [{ type: core_1.Input, args: ['draggable',] },],\n    };\n    return DraggableDirective;\n}());\nexports.DraggableDirective = DraggableDirective;\n",null]}