{"remainingRequest":"/home/rahul/Desktop/svgcomplete/svg/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/rahul/Desktop/svgcomplete/svg/node_modules/angular2-draggable/fesm5/angular2-draggable.js","dependencies":[{"path":"/home/rahul/Desktop/svgcomplete/svg/node_modules/angular2-draggable/fesm5/angular2-draggable.js","mtime":1529925364000},{"path":"/home/rahul/Desktop/svgcomplete/svg/node_modules/cache-loader/dist/cjs.js","mtime":1529912799520},{"path":"/home/rahul/Desktop/svgcomplete/svg/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Directive, ElementRef, Renderer2, Input, Output, HostListener, EventEmitter, NgModule } from '@angular/core';\nimport { __values } from 'tslib';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Position = /*@__PURE__*/ (function () {\n    function Position(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    Position.fromEvent = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            if (e instanceof MouseEvent) {\n                return new Position(e.clientX, e.clientY);\n            }\n            else {\n                return new Position(e.changedTouches[0].clientX, e.changedTouches[0].clientY);\n            }\n        };\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    Position.isIPosition = /**\n     * @param {?} obj\n     * @return {?}\n     */\n        function (obj) {\n            return !!obj && ('x' in obj) && ('y' in obj);\n        };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    Position.getCurrent = /**\n     * @param {?} el\n     * @return {?}\n     */\n        function (el) {\n            var /** @type {?} */ pos = new Position(0, 0);\n            if (window) {\n                var /** @type {?} */ computed = window.getComputedStyle(el);\n                if (computed) {\n                    pos.x = parseInt(computed.getPropertyValue('left'), 10);\n                    pos.y = parseInt(computed.getPropertyValue('top'), 10);\n                }\n                return pos;\n            }\n            else {\n                console.error('Not Supported!');\n                return null;\n            }\n        };\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    Position.prototype.add = /**\n     * @param {?} p\n     * @return {?}\n     */\n        function (p) {\n            this.x += p.x;\n            this.y += p.y;\n            return this;\n        };\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    Position.prototype.subtract = /**\n     * @param {?} p\n     * @return {?}\n     */\n        function (p) {\n            this.x -= p.x;\n            this.y -= p.y;\n            return this;\n        };\n    /**\n     * @return {?}\n     */\n    Position.prototype.reset = /**\n     * @return {?}\n     */\n        function () {\n            this.x = 0;\n            this.y = 0;\n            return this;\n        };\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    Position.prototype.set = /**\n     * @param {?} p\n     * @return {?}\n     */\n        function (p) {\n            this.x = p.x;\n            this.y = p.y;\n            return this;\n        };\n    return Position;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar AngularDraggableDirective = /*@__PURE__*/ (function () {\n    function AngularDraggableDirective(el, renderer) {\n        this.el = el;\n        this.renderer = renderer;\n        this.allowDrag = true;\n        this.moving = false;\n        this.orignal = null;\n        this.oldTrans = new Position(0, 0);\n        this.tempTrans = new Position(0, 0);\n        this.oldZIndex = '';\n        this.oldPosition = '';\n        this._zIndex = '';\n        this.needTransform = false;\n        this.started = new EventEmitter();\n        this.stopped = new EventEmitter();\n        this.edge = new EventEmitter();\n        /**\n         * List of allowed out of bounds edges *\n         */\n        this.outOfBounds = {\n            top: false,\n            right: false,\n            bottom: false,\n            left: false\n        };\n        /**\n         * Round the position to nearest grid\n         */\n        this.gridSize = 1;\n        /**\n         * Whether to limit the element stay in the bounds\n         */\n        this.inBounds = false;\n        /**\n         * Whether the element should use it's previous drag position on a new drag event.\n         */\n        this.trackPosition = true;\n        /**\n         * Input css scale transform of element so translations are correct\n         */\n        this.scale = 1;\n        /**\n         * Whether to prevent default event\n         */\n        this.preventDefaultEvent = false;\n        /**\n         * Set initial position by offsets\n         */\n        this.position = { x: 0, y: 0 };\n        /**\n         * Emit position offsets when moving\n         */\n        this.movingOffset = new EventEmitter();\n        /**\n         * Emit position offsets when put back\n         */\n        this.endOffset = new EventEmitter();\n    }\n    Object.defineProperty(AngularDraggableDirective.prototype, \"zIndex\", {\n        /** Set z-index when not dragging */\n        set: /**\n         * Set z-index when not dragging\n         * @param {?} setting\n         * @return {?}\n         */ function (setting) {\n            this.renderer.setStyle(this.el.nativeElement, 'z-index', setting);\n            this._zIndex = setting;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AngularDraggableDirective.prototype, \"ngDraggable\", {\n        set: /**\n         * @param {?} setting\n         * @return {?}\n         */ function (setting) {\n            if (setting !== undefined && setting !== null && setting !== '') {\n                this.allowDrag = !!setting;\n                var /** @type {?} */ element = this.handle ? this.handle : this.el.nativeElement;\n                if (this.allowDrag) {\n                    this.renderer.addClass(element, 'ng-draggable');\n                }\n                else {\n                    this.renderer.removeClass(element, 'ng-draggable');\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            if (this.allowDrag) {\n                var /** @type {?} */ element = this.handle ? this.handle : this.el.nativeElement;\n                this.renderer.addClass(element, 'ng-draggable');\n            }\n            this.resetPosition();\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (changes['position'] && !changes['position'].isFirstChange()) {\n                var /** @type {?} */ p = changes['position'].currentValue;\n                if (!this.moving) {\n                    if (Position.isIPosition(p)) {\n                        this.oldTrans.set(p);\n                    }\n                    else {\n                        this.oldTrans.reset();\n                    }\n                    this.transform();\n                }\n                else {\n                    this.needTransform = true;\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.resetPosition = /**\n     * @return {?}\n     */\n        function () {\n            if (Position.isIPosition(this.position)) {\n                this.oldTrans.set(this.position);\n            }\n            else {\n                this.oldTrans.reset();\n            }\n            this.tempTrans.reset();\n            this.transform();\n        };\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.moveTo = /**\n     * @param {?} p\n     * @return {?}\n     */\n        function (p) {\n            if (this.orignal) {\n                p.subtract(this.orignal);\n                this.tempTrans.set(p);\n                this.transform();\n                if (this.bounds) {\n                    this.edge.emit(this.boundsCheck());\n                }\n                this.movingOffset.emit({\n                    x: this.tempTrans.x + this.oldTrans.x,\n                    y: this.tempTrans.y + this.oldTrans.y\n                });\n            }\n        };\n    /**\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.transform = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ translateX = this.tempTrans.x + this.oldTrans.x;\n            var /** @type {?} */ translateY = this.tempTrans.y + this.oldTrans.y;\n            // Snap to grid: by grid size\n            if (this.gridSize > 1) {\n                translateX = Math.round(translateX / this.gridSize) * this.gridSize;\n                translateY = Math.round(translateY / this.gridSize) * this.gridSize;\n            }\n            var /** @type {?} */ value = \"translate(\" + translateX + \"px, \" + translateY + \"px)\";\n            if (this.scale !== 1) {\n                value += \" scale(\" + this.scale + \")\";\n            }\n            this.renderer.setStyle(this.el.nativeElement, 'transform', value);\n            this.renderer.setStyle(this.el.nativeElement, '-webkit-transform', value);\n            this.renderer.setStyle(this.el.nativeElement, '-ms-transform', value);\n            this.renderer.setStyle(this.el.nativeElement, '-moz-transform', value);\n            this.renderer.setStyle(this.el.nativeElement, '-o-transform', value);\n        };\n    /**\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.pickUp = /**\n     * @return {?}\n     */\n        function () {\n            // get old z-index:\n            this.oldZIndex = this.el.nativeElement.style.zIndex ? this.el.nativeElement.style.zIndex : '';\n            if (window) {\n                this.oldZIndex = window.getComputedStyle(this.el.nativeElement, null).getPropertyValue('z-index');\n            }\n            if (this.zIndexMoving) {\n                this.renderer.setStyle(this.el.nativeElement, 'z-index', this.zIndexMoving);\n            }\n            if (!this.moving) {\n                this.started.emit(this.el.nativeElement);\n                this.moving = true;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.boundsCheck = /**\n     * @return {?}\n     */\n        function () {\n            if (this.bounds) {\n                var /** @type {?} */ boundary = this.bounds.getBoundingClientRect();\n                var /** @type {?} */ elem = this.el.nativeElement.getBoundingClientRect();\n                var /** @type {?} */ result = {\n                    'top': this.outOfBounds.top ? true : boundary.top < elem.top,\n                    'right': this.outOfBounds.right ? true : boundary.right > elem.right,\n                    'bottom': this.outOfBounds.bottom ? true : boundary.bottom > elem.bottom,\n                    'left': this.outOfBounds.left ? true : boundary.left < elem.left\n                };\n                if (this.inBounds) {\n                    if (!result.top) {\n                        this.tempTrans.y -= elem.top - boundary.top;\n                    }\n                    if (!result.bottom) {\n                        this.tempTrans.y -= elem.bottom - boundary.bottom;\n                    }\n                    if (!result.right) {\n                        this.tempTrans.x -= elem.right - boundary.right;\n                    }\n                    if (!result.left) {\n                        this.tempTrans.x -= elem.left - boundary.left;\n                    }\n                    this.transform();\n                }\n                return result;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.putBack = /**\n     * @return {?}\n     */\n        function () {\n            if (this._zIndex) {\n                this.renderer.setStyle(this.el.nativeElement, 'z-index', this._zIndex);\n            }\n            else if (this.zIndexMoving) {\n                if (this.oldZIndex) {\n                    this.renderer.setStyle(this.el.nativeElement, 'z-index', this.oldZIndex);\n                }\n                else {\n                    this.el.nativeElement.style.removeProperty('z-index');\n                }\n            }\n            if (this.moving) {\n                this.stopped.emit(this.el.nativeElement);\n                if (this.needTransform) {\n                    if (Position.isIPosition(this.position)) {\n                        this.oldTrans.set(this.position);\n                    }\n                    else {\n                        this.oldTrans.reset();\n                    }\n                    this.transform();\n                    this.needTransform = false;\n                }\n                if (this.bounds) {\n                    this.edge.emit(this.boundsCheck());\n                }\n                this.moving = false;\n                this.endOffset.emit({\n                    x: this.tempTrans.x + this.oldTrans.x,\n                    y: this.tempTrans.y + this.oldTrans.y\n                });\n                if (this.trackPosition) {\n                    this.oldTrans.add(this.tempTrans);\n                }\n                this.tempTrans.reset();\n                if (!this.trackPosition) {\n                    this.transform();\n                }\n            }\n        };\n    /**\n     * @param {?} target\n     * @param {?} element\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.checkHandleTarget = /**\n     * @param {?} target\n     * @param {?} element\n     * @return {?}\n     */\n        function (target, element) {\n            // Checks if the target is the element clicked, then checks each child element of element as well\n            // Ignores button clicks\n            // Ignore elements of type button\n            if (element.tagName === 'BUTTON') {\n                return false;\n            }\n            // If the target was found, return true (handle was found)\n            if (element === target) {\n                return true;\n            }\n            // Recursively iterate this elements children\n            for (var /** @type {?} */ child in element.children) {\n                if (element.children.hasOwnProperty(child)) {\n                    if (this.checkHandleTarget(target, element.children[child])) {\n                        return true;\n                    }\n                }\n            }\n            // Handle was not found in this lineage\n            // Note: return false is ignore unless it is the parent element\n            return false;\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.onMouseDown = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            // 1. skip right click;\n            if (event instanceof MouseEvent && event.button === 2) {\n                return;\n            }\n            // 2. if handle is set, the element can only be moved by handle\n            var /** @type {?} */ target = event.target || event.srcElement;\n            if (this.handle !== undefined && !this.checkHandleTarget(target, this.handle)) {\n                return;\n            }\n            if (this.preventDefaultEvent) {\n                event.stopPropagation();\n                event.preventDefault();\n            }\n            this.orignal = Position.fromEvent(event);\n            this.pickUp();\n        };\n    /**\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.onMouseLeave = /**\n     * @return {?}\n     */\n        function () {\n            this.putBack();\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.onMouseMove = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            if (this.moving && this.allowDrag) {\n                if (this.preventDefaultEvent) {\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n                this.moveTo(Position.fromEvent(event));\n            }\n        };\n    return AngularDraggableDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ResizeHandle = /*@__PURE__*/ (function () {\n    function ResizeHandle(parent, renderer, type, css, onMouseDown) {\n        var _this = this;\n        this.parent = parent;\n        this.renderer = renderer;\n        this.type = type;\n        this.css = css;\n        this.onMouseDown = onMouseDown;\n        // generate handle div\n        var /** @type {?} */ handle = renderer.createElement('div');\n        renderer.addClass(handle, 'ng-resizable-handle');\n        renderer.addClass(handle, css);\n        // add default diagonal for se handle\n        if (type === 'se') {\n            renderer.addClass(handle, 'ng-resizable-diagonal');\n        }\n        // append div to parent\n        if (this.parent) {\n            parent.appendChild(handle);\n        }\n        // create and register event listener\n        this._onResize = function (event) { onMouseDown(event, _this); };\n        handle.addEventListener('mousedown', this._onResize);\n        handle.addEventListener('touchstart', this._onResize);\n        // done\n        this._handle = handle;\n    }\n    /**\n     * @return {?}\n     */\n    ResizeHandle.prototype.dispose = /**\n     * @return {?}\n     */\n        function () {\n            this._handle.removeEventListener('mousedown', this._onResize);\n            this._handle.removeEventListener('touchstart', this._onResize);\n            if (this.parent) {\n                this.parent.removeChild(this._handle);\n            }\n            this._handle = null;\n            this._onResize = null;\n        };\n    Object.defineProperty(ResizeHandle.prototype, \"el\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._handle;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ResizeHandle;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Size = /*@__PURE__*/ (function () {\n    function Size(width, height) {\n        this.width = width;\n        this.height = height;\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    Size.getCurrent = /**\n     * @param {?} el\n     * @return {?}\n     */\n        function (el) {\n            var /** @type {?} */ size = new Size(0, 0);\n            if (window) {\n                var /** @type {?} */ computed = window.getComputedStyle(el);\n                if (computed) {\n                    size.width = parseInt(computed.getPropertyValue('width'), 10);\n                    size.height = parseInt(computed.getPropertyValue('height'), 10);\n                }\n                return size;\n            }\n            else {\n                console.error('Not Supported!');\n                return null;\n            }\n        };\n    return Size;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar AngularResizableDirective = /*@__PURE__*/ (function () {\n    function AngularResizableDirective(el, renderer) {\n        this.el = el;\n        this.renderer = renderer;\n        this._resizable = true;\n        this._handles = {};\n        this._handleType = [];\n        this._handleResizing = null;\n        this._origMousePos = null;\n        this._origSize = null;\n        this._origPos = null;\n        /**\n         * Which handles can be used for resizing.\n         * \\@example\n         * [rzHandles] = \"'n,e,s,w,se,ne,sw,nw'\"\n         * [rzHandles] = { n: 'ng-resizable-n', e: 'ng-resizable-e' }\n         *\n         *\n         */\n        this.rzHandles = 'e,s,se';\n    }\n    Object.defineProperty(AngularResizableDirective.prototype, \"ngResizable\", {\n        /** Disables the resizable if set to false. */\n        set: /**\n         * Disables the resizable if set to false.\n         * @param {?} v\n         * @return {?}\n         */ function (v) {\n            if (v !== undefined && v !== null && v !== '') {\n                this._resizable = !!v;\n                this.updateResizable();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    AngularResizableDirective.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (changes['rzHandles'] && !changes['rzHandles'].isFirstChange()) {\n                this.updateResizable();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    AngularResizableDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.updateResizable();\n        };\n    /**\n     * @return {?}\n     */\n    AngularResizableDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.removeHandles();\n        };\n    /**\n     * @return {?}\n     */\n    AngularResizableDirective.prototype.updateResizable = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ element = this.el.nativeElement;\n            // clear handles:\n            this.renderer.removeClass(element, 'ng-resizable');\n            this.removeHandles();\n            // create new ones:\n            if (this._resizable) {\n                this.renderer.addClass(element, 'ng-resizable');\n                this.createHandles();\n            }\n        };\n    /**\n     * Use it to create handle divs\n     * @return {?}\n     */\n    AngularResizableDirective.prototype.createHandles = /**\n     * Use it to create handle divs\n     * @return {?}\n     */\n        function () {\n            if (!this.rzHandles) {\n                return;\n            }\n            var /** @type {?} */ tmpHandleTypes;\n            if (typeof this.rzHandles === 'string') {\n                tmpHandleTypes = this.rzHandles.replace(/ /g, '').toLowerCase().split(',');\n                try {\n                    for (var tmpHandleTypes_1 = __values(tmpHandleTypes), tmpHandleTypes_1_1 = tmpHandleTypes_1.next(); !tmpHandleTypes_1_1.done; tmpHandleTypes_1_1 = tmpHandleTypes_1.next()) {\n                        var type = tmpHandleTypes_1_1.value;\n                        // default handle theme: ng-resizable-$type.\n                        var /** @type {?} */ handle = this.createHandleByType(type, \"ng-resizable-\" + type);\n                        if (handle) {\n                            this._handleType.push(type);\n                            this._handles[type] = handle;\n                        }\n                    }\n                }\n                catch (e_1_1) {\n                    e_1 = { error: e_1_1 };\n                }\n                finally {\n                    try {\n                        if (tmpHandleTypes_1_1 && !tmpHandleTypes_1_1.done && (_a = tmpHandleTypes_1.return))\n                            _a.call(tmpHandleTypes_1);\n                    }\n                    finally {\n                        if (e_1)\n                            throw e_1.error;\n                    }\n                }\n            }\n            else {\n                tmpHandleTypes = Object.keys(this.rzHandles);\n                try {\n                    for (var tmpHandleTypes_2 = __values(tmpHandleTypes), tmpHandleTypes_2_1 = tmpHandleTypes_2.next(); !tmpHandleTypes_2_1.done; tmpHandleTypes_2_1 = tmpHandleTypes_2.next()) {\n                        var type = tmpHandleTypes_2_1.value;\n                        // custom handle theme.\n                        var /** @type {?} */ handle = this.createHandleByType(type, this.rzHandles[type]);\n                        if (handle) {\n                            this._handleType.push(type);\n                            this._handles[type] = handle;\n                        }\n                    }\n                }\n                catch (e_2_1) {\n                    e_2 = { error: e_2_1 };\n                }\n                finally {\n                    try {\n                        if (tmpHandleTypes_2_1 && !tmpHandleTypes_2_1.done && (_b = tmpHandleTypes_2.return))\n                            _b.call(tmpHandleTypes_2);\n                    }\n                    finally {\n                        if (e_2)\n                            throw e_2.error;\n                    }\n                }\n            }\n            var e_1, _a, e_2, _b;\n        };\n    /**\n     * Use it to create a handle\n     * @param {?} type\n     * @param {?} css\n     * @return {?}\n     */\n    AngularResizableDirective.prototype.createHandleByType = /**\n     * Use it to create a handle\n     * @param {?} type\n     * @param {?} css\n     * @return {?}\n     */\n        function (type, css) {\n            var /** @type {?} */ _el = this.el.nativeElement;\n            if (!type.match(/^(se|sw|ne|nw|n|e|s|w)$/)) {\n                console.error('Invalid handle type:', type);\n                return null;\n            }\n            return new ResizeHandle(_el, this.renderer, type, css, this.onMouseDown.bind(this));\n        };\n    /**\n     * @return {?}\n     */\n    AngularResizableDirective.prototype.removeHandles = /**\n     * @return {?}\n     */\n        function () {\n            try {\n                for (var _a = __values(this._handleType), _b = _a.next(); !_b.done; _b = _a.next()) {\n                    var type = _b.value;\n                    this._handles[type].dispose();\n                }\n            }\n            catch (e_3_1) {\n                e_3 = { error: e_3_1 };\n            }\n            finally {\n                try {\n                    if (_b && !_b.done && (_c = _a.return))\n                        _c.call(_a);\n                }\n                finally {\n                    if (e_3)\n                        throw e_3.error;\n                }\n            }\n            this._handleType = [];\n            this._handles = {};\n            var e_3, _c;\n        };\n    /**\n     * @param {?} event\n     * @param {?} handle\n     * @return {?}\n     */\n    AngularResizableDirective.prototype.onMouseDown = /**\n     * @param {?} event\n     * @param {?} handle\n     * @return {?}\n     */\n        function (event, handle) {\n            // skip right click;\n            if (event instanceof MouseEvent && event.button === 2) {\n                return;\n            }\n            // prevent default events\n            event.stopPropagation();\n            event.preventDefault();\n            if (!this._handleResizing) {\n                var /** @type {?} */ elm = this.el.nativeElement;\n                this._origMousePos = Position.fromEvent(event);\n                this._origSize = Size.getCurrent(elm);\n                this._origPos = Position.getCurrent(elm); // x: left, y: top\n                this.startResize(handle);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    AngularResizableDirective.prototype.onMouseLeave = /**\n     * @return {?}\n     */\n        function () {\n            if (this._handleResizing) {\n                this.stopResize();\n                this._origMousePos = null;\n                this._origSize = null;\n                this._origPos = null;\n            }\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    AngularResizableDirective.prototype.onMouseMove = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            if (this._handleResizing && this._resizable && this._origMousePos && this._origPos && this._origSize) {\n                this.resizeTo(Position.fromEvent(event));\n            }\n        };\n    /**\n     * @param {?} handle\n     * @return {?}\n     */\n    AngularResizableDirective.prototype.startResize = /**\n     * @param {?} handle\n     * @return {?}\n     */\n        function (handle) {\n            this._handleResizing = handle;\n        };\n    /**\n     * @return {?}\n     */\n    AngularResizableDirective.prototype.stopResize = /**\n     * @return {?}\n     */\n        function () {\n            this._handleResizing = null;\n        };\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    AngularResizableDirective.prototype.resizeTo = /**\n     * @param {?} p\n     * @return {?}\n     */\n        function (p) {\n            var /** @type {?} */ container = this.el.nativeElement;\n            p.subtract(this._origMousePos);\n            if (this._handleResizing.type.match(/n/)) {\n                // n, ne, nw\n                this.renderer.setStyle(container, 'height', (this._origSize.height - p.y) + 'px');\n                this.renderer.setStyle(container, 'top', (this._origPos.y + p.y) + 'px');\n            }\n            else if (this._handleResizing.type.match(/s/)) {\n                // s, se, sw\n                this.renderer.setStyle(container, 'height', (this._origSize.height + p.y) + 'px');\n            }\n            if (this._handleResizing.type.match(/e/)) {\n                // e, ne, se\n                this.renderer.setStyle(container, 'width', (this._origSize.width + p.x) + 'px');\n            }\n            else if (this._handleResizing.type.match(/w/)) {\n                // w, nw, sw\n                this.renderer.setStyle(container, 'width', (this._origSize.width - p.x) + 'px');\n                this.renderer.setStyle(container, 'left', (this._origPos.x + p.x) + 'px');\n            }\n        };\n    return AngularResizableDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar AngularDraggableModule = /*@__PURE__*/ (function () {\n    function AngularDraggableModule() {\n    }\n    return AngularDraggableModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { AngularDraggableDirective, AngularResizableDirective, AngularDraggableModule, Position };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64, \n",null]}