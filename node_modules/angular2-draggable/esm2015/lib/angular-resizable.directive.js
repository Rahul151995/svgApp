/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Input, HostListener } from '@angular/core';
import { ResizeHandle } from './widgets/resize-handle';
import { Position } from './models/position';
import { Size } from './models/size';
export class AngularResizableDirective {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this._resizable = true;
        this._handles = {};
        this._handleType = [];
        this._handleResizing = null;
        this._origMousePos = null;
        this._origSize = null;
        this._origPos = null;
        /**
         * Which handles can be used for resizing.
         * \@example
         * [rzHandles] = "'n,e,s,w,se,ne,sw,nw'"
         * [rzHandles] = { n: 'ng-resizable-n', e: 'ng-resizable-e' }
         *
         *
         */
        this.rzHandles = 'e,s,se';
    }
    /**
     * Disables the resizable if set to false.
     * @param {?} v
     * @return {?}
     */
    set ngResizable(v) {
        if (v !== undefined && v !== null && v !== '') {
            this._resizable = !!v;
            this.updateResizable();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['rzHandles'] && !changes['rzHandles'].isFirstChange()) {
            this.updateResizable();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.updateResizable();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeHandles();
    }
    /**
     * @return {?}
     */
    updateResizable() {
        const /** @type {?} */ element = this.el.nativeElement;
        // clear handles:
        this.renderer.removeClass(element, 'ng-resizable');
        this.removeHandles();
        // create new ones:
        if (this._resizable) {
            this.renderer.addClass(element, 'ng-resizable');
            this.createHandles();
        }
    }
    /**
     * Use it to create handle divs
     * @return {?}
     */
    createHandles() {
        if (!this.rzHandles) {
            return;
        }
        let /** @type {?} */ tmpHandleTypes;
        if (typeof this.rzHandles === 'string') {
            tmpHandleTypes = this.rzHandles.replace(/ /g, '').toLowerCase().split(',');
            for (let /** @type {?} */ type of tmpHandleTypes) {
                // default handle theme: ng-resizable-$type.
                let /** @type {?} */ handle = this.createHandleByType(type, `ng-resizable-${type}`);
                if (handle) {
                    this._handleType.push(type);
                    this._handles[type] = handle;
                }
            }
        }
        else {
            tmpHandleTypes = Object.keys(this.rzHandles);
            for (let /** @type {?} */ type of tmpHandleTypes) {
                // custom handle theme.
                let /** @type {?} */ handle = this.createHandleByType(type, this.rzHandles[type]);
                if (handle) {
                    this._handleType.push(type);
                    this._handles[type] = handle;
                }
            }
        }
    }
    /**
     * Use it to create a handle
     * @param {?} type
     * @param {?} css
     * @return {?}
     */
    createHandleByType(type, css) {
        const /** @type {?} */ _el = this.el.nativeElement;
        if (!type.match(/^(se|sw|ne|nw|n|e|s|w)$/)) {
            console.error('Invalid handle type:', type);
            return null;
        }
        return new ResizeHandle(_el, this.renderer, type, css, this.onMouseDown.bind(this));
    }
    /**
     * @return {?}
     */
    removeHandles() {
        for (let /** @type {?} */ type of this._handleType) {
            this._handles[type].dispose();
        }
        this._handleType = [];
        this._handles = {};
    }
    /**
     * @param {?} event
     * @param {?} handle
     * @return {?}
     */
    onMouseDown(event, handle) {
        // skip right click;
        if (event instanceof MouseEvent && event.button === 2) {
            return;
        }
        // prevent default events
        event.stopPropagation();
        event.preventDefault();
        if (!this._handleResizing) {
            const /** @type {?} */ elm = this.el.nativeElement;
            this._origMousePos = Position.fromEvent(event);
            this._origSize = Size.getCurrent(elm);
            this._origPos = Position.getCurrent(elm); // x: left, y: top
            this.startResize(handle);
        }
    }
    /**
     * @return {?}
     */
    onMouseLeave() {
        if (this._handleResizing) {
            this.stopResize();
            this._origMousePos = null;
            this._origSize = null;
            this._origPos = null;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseMove(event) {
        if (this._handleResizing && this._resizable && this._origMousePos && this._origPos && this._origSize) {
            this.resizeTo(Position.fromEvent(event));
        }
    }
    /**
     * @param {?} handle
     * @return {?}
     */
    startResize(handle) {
        this._handleResizing = handle;
    }
    /**
     * @return {?}
     */
    stopResize() {
        this._handleResizing = null;
    }
    /**
     * @param {?} p
     * @return {?}
     */
    resizeTo(p) {
        const /** @type {?} */ container = this.el.nativeElement;
        p.subtract(this._origMousePos);
        if (this._handleResizing.type.match(/n/)) {
            // n, ne, nw
            this.renderer.setStyle(container, 'height', (this._origSize.height - p.y) + 'px');
            this.renderer.setStyle(container, 'top', (this._origPos.y + p.y) + 'px');
        }
        else if (this._handleResizing.type.match(/s/)) {
            // s, se, sw
            this.renderer.setStyle(container, 'height', (this._origSize.height + p.y) + 'px');
        }
        if (this._handleResizing.type.match(/e/)) {
            // e, ne, se
            this.renderer.setStyle(container, 'width', (this._origSize.width + p.x) + 'px');
        }
        else if (this._handleResizing.type.match(/w/)) {
            // w, nw, sw
            this.renderer.setStyle(container, 'width', (this._origSize.width - p.x) + 'px');
            this.renderer.setStyle(container, 'left', (this._origPos.x + p.x) + 'px');
        }
    }
}
AngularResizableDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngResizable]',
                exportAs: 'ngResizable'
            },] },
];
/** @nocollapse */
AngularResizableDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
AngularResizableDirective.propDecorators = {
    ngResizable: [{ type: Input }],
    rzHandles: [{ type: Input }],
    onMouseLeave: [{ type: HostListener, args: ['document:mouseup',] }, { type: HostListener, args: ['document:mouseleave',] }, { type: HostListener, args: ['document:touchend',] }, { type: HostListener, args: ['document:touchcancel',] }],
    onMouseMove: [{ type: HostListener, args: ['document:mousemove', ['$event'],] }, { type: HostListener, args: ['document:touchmove', ['$event'],] }]
};
function AngularResizableDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    AngularResizableDirective.prototype._resizable;
    /** @type {?} */
    AngularResizableDirective.prototype._handles;
    /** @type {?} */
    AngularResizableDirective.prototype._handleType;
    /** @type {?} */
    AngularResizableDirective.prototype._handleResizing;
    /** @type {?} */
    AngularResizableDirective.prototype._origMousePos;
    /** @type {?} */
    AngularResizableDirective.prototype._origSize;
    /** @type {?} */
    AngularResizableDirective.prototype._origPos;
    /**
     * Which handles can be used for resizing.
     * \@example
     * [rzHandles] = "'n,e,s,w,se,ne,sw,nw'"
     * [rzHandles] = { n: 'ng-resizable-n', e: 'ng-resizable-e' }
     *
     *
     * @type {?}
     */
    AngularResizableDirective.prototype.rzHandles;
    /** @type {?} */
    AngularResizableDirective.prototype.el;
    /** @type {?} */
    AngularResizableDirective.prototype.renderer;
}

//# sourceMappingURL=data:application/json;base64,