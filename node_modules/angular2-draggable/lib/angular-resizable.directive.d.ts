import { ElementRef, Renderer2, OnInit, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';
import { ResizeHandle } from './widgets/resize-handle';
import { ResizeHandleType } from './models/resize-handle-type';
import { Position } from './models/position';
export declare class AngularResizableDirective implements OnInit, OnChanges, OnDestroy {
    private el;
    private renderer;
    private _resizable;
    private _handles;
    private _handleType;
    private _handleResizing;
    private _origMousePos;
    private _origSize;
    private _origPos;
    /** Disables the resizable if set to false. */
    ngResizable: any;
    /**
     * Which handles can be used for resizing.
     * @example
     * [rzHandles] = "'n,e,s,w,se,ne,sw,nw'"
     * [rzHandles] = { n: 'ng-resizable-n', e: 'ng-resizable-e' }
     *
     * */
    rzHandles: ResizeHandleType;
    constructor(el: ElementRef, renderer: Renderer2);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private updateResizable();
    /** Use it to create handle divs */
    private createHandles();
    /** Use it to create a handle */
    private createHandleByType(type, css);
    private removeHandles();
    onMouseDown(event: MouseEvent | TouchEvent, handle: ResizeHandle): void;
    onMouseLeave(): void;
    onMouseMove(event: MouseEvent | TouchEvent): void;
    startResize(handle: ResizeHandle): void;
    stopResize(): void;
    resizeTo(p: Position): void;
}
